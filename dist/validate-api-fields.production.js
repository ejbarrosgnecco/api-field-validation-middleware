"use strict";let checkField=(e,t,r)=>{switch(t){case"type":return typeof e===r;case"regex":return r.test(e);case"min":return e>=r;case"max":return e<=r;case"wholeNumber":return e%1==0===r}},checkValueConstraints=(e,t)=>{if("object"===e.valueConstraints.type)return!validateApiFields(t,e.nestedValues);if("array"!==e.valueConstraints.type)return Object.keys(e.valueConstraints).some(r=>{let s=e.valueConstraints[r];return!checkField(t,r,s)});{let r=e.nestedValues;return!1===Array.isArray(t)||(r.freeArray?(t.length,r.minLength,!1):!!t.some(t=>Object.keys(r.valueConstraints).some(s=>{let n=r.valueConstraints[s];return"type"===s&&"array"===n?checkValueConstraints(e.nestedValues,t):!checkField(t,s,n)}))||!(t.length>=(r.minLength||0)&&t.length<=(r.maxLength||1e5)))}},validateApiFields=(e,t)=>{let r=t.fields||t,s=[],n=!0;for(let a=0;a<r.length;a++){let l=r[a],i=e[l.key];if(void 0===i){l.required&&(t.returnFailedValues&&s.push(l.key),n=!1);continue}let u=checkValueConstraints(l,i);if(!0===u){n=!1,t.returnFailedValues&&s.push(l.key);continue}}return n},middlewareWrapper=e=>(t,r,s)=>{let n=validateApiFields(t.body,e);n?s():r.status(400).json("One or more fields in this request were incorrectly formatted")};export default middlewareWrapper;